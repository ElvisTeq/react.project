#1
Listening to Events & Working with Event Handlers

<button onCLick={}></button>
---------------------------------------- onCLick={}
- Event Listener for Click
Ex => "ExpenseItem.js"

____________________________________________________________________________________________________________
#2
How Component Function Are Executed

* They are executed by order

Ex => "ExpenseItem.js"
- (let title = props.title;) => will not be called because => "clickHandler" is called before "App.js"
  
____________________________________________________________________________________________________________
#3
Working with "State"

* Implementing "State"
Ex=> "ExpenseItems.js"

---------------------------------------- import React from 'react'
- Importing react (for older versions)
- JSX requires this

---------------------------------------- import { useState } from 'react'
- Importing Function to upload / call a Componen again to update data

---------------------------------------- const [data, Function] = useState(props.data)
- Returns a array with => [data, function]
[data] => Current state value
[function] => Function for updating the value => (This function will call the componen again to update)

******************* Important ******************
* [function] => Changes will apply by the end of the function where is called
* [function] => Must be call only inside the componen function

____________________________________________________________________________________________________________
#4
A Closer Look at the "useState" Hook

* Components are created individualy each time is called.
- This way the state will not update all of them at the same time

* State can be Updated in many wais
- setTimeout()
- eventListeners()
- onClick()

____________________________________________________________________________________________________________
#5
Adding Form Imputs

* Created => "NewExpense" 
- ExpenseForm.css
- ExpenseForm.js
- NewExpense.css
- NewExpense.js

____________________________________________________________________________________________________________
#6
Listening to User Imput

* Created => "titleChangeHandler(event)"
- Attatched to a "onChange" event
- has access to current value in every "key" we input (event.target.value)

---------------------------------------------- onChange={}
- Every time any changes happends

____________________________________________________________________________________________________________
#7
Working with Multiple States

* We can use Multiple "useState()" inside a Component
Ex => "ExpenseForm.js"

____________________________________________________________________________________________________________
#8
Using One State Instead (And What's Better)

---------------------------------------------- useState({})
- To create one State for multiple inputs
Ex => "ExpenseForm.js"

____________________________________________________________________________________________________________
#9
Updating State That Depends on The Previous State

* Function from "useState()" is called differently in order to implement this
Ex => "ExpenseForm.js"