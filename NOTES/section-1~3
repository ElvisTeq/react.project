#1
Creating a new React Project

----------------------------------------------- npx create-react-app any-name

- Create folder for react project
- Run in => Command Prompt

----------------------------------------------- cd react-complete-guide/

- Access folder in command
- npm start => To start react

----------------------------------------------- npm install

- Install all dependencias in the (package.json)

///////////////////////////////////////////////////////////////////////////////////////////////
#2
Analyzing a Standar React Project

Exaple => "index.js"

----------------------------------------------- import ReactDOM from 'react-dom/clinet'
* Package to create user interface

----------------------------------------------- reactDOM.createRoot()
* Selects a element "apot" for "react" to manipulate/replace content

///////////////////////////////////////////////////////////////////////////////////////////////
#3
Introducing JSX => HTML code inside JS

///////////////////////////////////////////////////////////////////////////////////////////////
#4
How React Works

* JS => uses imperative code (step by step strunctions)
* React.js => uses components to build HTML (reusing functions to render HTML)

///////////////////////////////////////////////////////////////////////////////////////////////
#5
Building a Custom Component

* Component in React.js is just a JS function
* Component starts with capital Name 

Example => "ExpenseItem.js"

///////////////////////////////////////////////////////////////////////////////////////////////
#6
Writing More Complex JSX code

Example => "ExpenseItem.js"
- Writting multiple elements

///////////////////////////////////////////////////////////////////////////////////////////////
#7
Adding Basic CSS Styling

* Create file with the same name as the "Component".css
Example => "ExpenseItem.css"

* Import "Component.css" file to the "Component.js"
- To use css in a component

------------------------------------------- className="css-style-name"
- To add a css Style to a element
Example => "ExpenseItem.js"

///////////////////////////////////////////////////////////////////////////////////////////////
#8
Outputting Dynamic Data & Working with Expressions in JSX

* Creating variables in Component function

------------------------------------------- {}
- To write JS code as a Element value
- Ex => <h2>{anyJsCode}</h2>

------------------------------------------- {varName}
- To add Varable as a Element value
- Ex => <h2>{VariableName}</h2>

///////////////////////////////////////////////////////////////////////////////////////////////
#9
Passing Data via "Props"
- Using a Component template in a different module

------------------------------------------- FunctionName(props)
- Adding 1 property to a Component Function to pass data into the imported file
- Ex => "ExpenseItem.js" to "App.js" on how to use

///////////////////////////////////////////////////////////////////////////////////////////////
#10
Adding "normal" JavaScript Logic to Component

* Created Date (month, day, year) and stored into a Variable
- Then added the Date variable into the JSX

///////////////////////////////////////////////////////////////////////////////////////////////
#11
Splitting Components Into Multiple Components

* Created "ExpenseDate.js"
- To handle all Dates
- Imported to "ExpenseItem.js"

* Using "props" to chain components
- ExpensesDate => ExpenseItem => App.js

------------------------------------------- <ExpenseDate />
- Shorter way to write => <ExpenseDate></ExpenseDate>
- Only when there's no content inside